{
	// Place your VueReact workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }


    "Vue Instance": {
        "prefix": "vuei",
        "body": [
            "new Vue({",
            "    /* edtmc^2w */",
            "    el: \"${1:}\",",
            "    data: {",
            "        ",
            "    },",
            "    //template: ``,",
            "    methods: {",
            "        ",
            "    },",
            "    components: {",
            "        /* 지역 컴포넌트 등록. 예시) \"태그명\" : 컴포넌트명 */",
            "        ",
            "    }, ",
            "    computed: {",
            "        ",
            "    },",
            "    watch: {",
            "        ",
            "    },",
            "    mounted: function() {",
            "        console.log(\"mounted\");",
            "    },",
            "    updated: function() {",
            "        console.log(\"updated\");",
            "    },",
            "});",
            ""
        ],
        "description": "Vue Instance"
    },
    "Vue Component Gloabl": {
        "prefix": "vuegc",
        "body": [
            "Vue.component(\"${1:${TM_FILENAME_BASE}}\", { ",
            "    /* pdtmc^2w */",
            "    props: [] ,",
            "    data: function() {",
            "        return {",
            "        }",
            "    },",
            "    template: `",
            "        ",
            "    `,",
            "    methods: {",
            "        ",
            "    },",
            "    components: {",
            "        /* 지역 컴포넌트 등록. 예시) \"태그명\" : 컴포넌트명 */",
            "        ",
            "    },",
            "    computed: { ",
            "        /* 자동처리 + 동기식. 메서드로 작성. return 필수. */",
            "        ",
            "    },",
            "    watch: { ",
            "        /* 자동처리 + 비동기식. data 에 등록된 프로퍼티 모니터링. 메서드로 작성. 매개변수 입력 필수  */",
            "        ",
            "    },",
            "    mounted: function() {",
            "        console.log(\"mounted\");",
            "    },",
            "    updated: function() {",
            "        console.log(\"updated\");",
            "    },",
            "});",
            ""
        ],
        "description": "Vue Global Component"
    },
    "Vue Component Local": {
        "prefix": "vuelc",
        "body": [
            "var ${1:${TM_FILENAME_BASE}} = { ",
            "    /* pdtmc^2w */",
            "    props: [] ,",
            "    data: function() {",
            "        return {",
            "        }",
            "    },",
            "    template: `",
            "        ",
            "    `,",
            "    methods: {",
            "        ",
            "    },",
            "    components: {",
            "        /* 지역 컴포넌트 등록. 예시) \"태그명\" : 컴포넌트명 */",
            "        ",
            "    },",
            "    computed: { ",
            "        /* 자동처리 + 동기식. 메서드로 작성. return 필수. */",
            "        ",
            "    },",
            "    watch: { ",
            "        /* 자동처리 + 비동기식. data 에 등록된 프로퍼티 모니터링. 메서드로 작성. 매개변수 입력 필수  */",
            "        ",
            "    },",
            "    mounted: function() {",
            "        console.log(\"mounted\");",
            "    },",
            "    updated: function() {",
            "        console.log(\"updated\");",
            "    },",
            "};",
            ""
        ],
        "description": "Vue Local Component"
    },
    "Vue Single File Component": {
        "prefix": "vuefc",
        "body": [
            "<style scoped>",
            "    ",
            "</style>",
            "",
            "<template>",
            "    ",
            "</template>",
            "",
            "<script>",
            "    export default { ",
            "        /* pdtmc^2w */",
            "        props: [] ,",
            "        data: function() {",
            "            return {",
            "            }",
            "        },",
            "        //template: ``,",
            "        methods: {",
            "            ",
            "        },",
            "        components: {",
            "            /* 컴포넌트 등록. 예시) \"태그명\" : 컴포넌트명 */",
            "            ",
            "        },",
            "        computed: { ",
            "            /* 자동처리 + 동기식. 메서드로 작성. return 필수. */",
            "            ",
            "        },",
            "        watch: { ",
            "            /* 자동처리 + 비동기식. data 에 등록된 프로퍼티 모니터링. 메서드로 작성. 매개변수 입력 필수  */",
            "            ",
            "        },",
            "        mounted: function() {",
            "            console.log(\"mounted\");",
            "        },",
            "        updated: function() {",
            "            console.log(\"updated\");",
            "        },",
            "    }",
            "</script>"
        ],
        "description": "Vue Single File Component"
    },
    "Vue plugin import": {
        "prefix": "vueplugin",
        "body": [
            "",
            "<!-- vue 플러그인 임포트   -->",
            "<script src=\"https://unpkg.com/vue@2.5.16/dist/vue.js\">/* vue 플러그인 임포트 */</script>",
            "<script src=\"https://unpkg.com/vuex@3.3.0/dist/vuex.js\"> /* vuex 플러그인 임포트 */</script>",
            "<script src=\"https://unpkg.com/vue-router@3.1.6/dist/vue-router.js\"> /* vue 라우터 플러그인 임포트 */</script>",
            "<script src=\"https://unpkg.com/axios/dist/axios.min.js\"> /* axios 플러그인 임포트 */</script>",
            "<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js\"> /* jQuery 플러그인 임포트 */</script>",
            "<script>",
            "    ",
            "</script>"
        ],
        "description": "Vue plugin import"
    },
    "Axios": {
        "prefix": "axios",
        "body": [
            "// import axios from \"axios\";",
            "",
            "axios({",
            "    url: \"item\",  // 호출되는 서버 주소.",
            "    method: \"get\",       // request method: get, post, delete, put",
            "    params: { },  // 서버로 보내는 데이터. 예시) { data1:\"test1\", data2:\"test2\" } ",
            "    timeout: 30000,    // 최대 대기 시간: 30초. 30초 이상이 되면 fail 부분이 실행됨.",
            "    responseType: \"json\",  // response로 넘어오는 데이터 형태: text, html, xml, json, jsonp, script",
            "})",
            ".then( (res) => {",
            "    console.log(res.data);",
            "    this.message1 = res.data;",
            "})",
            ".catch((error) => {",
            "    console.log(error);",
            "});"
        ],
        "description": "React script"
    },

    "React Class Component": {
        "prefix": "rcc",
        "body": [
            "//import React, {Component, PureComponent, Fragment} from \"react\";",
            "",
            "console.log(React);",
            "",
            "class ${1:${TM_FILENAME_BASE}} extends React.Component {",
            "",
            "    static defaultProps = {  /*  props의 디폴트 값 설정 */  }",
            "    static propsTypes = {  /* props의 프로퍼티 타입 설정 */ }",
            "    state = {",
            "        // 상태값(변수)을 정의한다.",
            "",
            "    }",
            "    style = {",
            "        // 컴포넌트 내부에서 사용할 인라인 스타일을 정의한다.",
            "        // getter 를 사용하면 객체 내부 참조가 가능하다.",
            "    ",
            "    }",
            "    func = {",
            "        // func에 정의된 메서드는 반드시 constructor에서 this를 bind() 처리해야 한다.",
            "        // func에는 자식 컴포넌트에 넘길 메서드만 작성한다.",
            "        // 왜 자식에게 부모 메서드를 넘기나? 부모의 상태값을 변경하기 위해서.",
            "    ",
            "    }",
            "    constructor(props) {",
            "        super()",
            "        // this 바인딩. 예시) this.handler = this.handler.bind(this)",
            "        // func 에 정의한 메서드는 반드시 this bind 처리해야 한다.",
            "        ",
            "        // ref 만들기. 예시) this.inputref = React.createRef()",
            "        ",
            "    }",
            "    componentDidMount() {",
            "        // 마운트 완료 후에 실행됨 : 페이지 load 될 때 한번",
            "        // componentDidMount가 사용되는 경우: redux 구독 설정, focus 줄때",
            "    }",
            "    componentDidUpdate(prevProps, prevState) {",
            "        // 업데이트 완료 후에 실행됨 : 여러번, state 가 변경될 때마다",
            "    }",
            "    componentWillUnmount() {",
            "        // 언마운트 완료 후에 실행됨 : 페이지 unload 될 때 한번",
            "        // componentWillUnmount가 사용되는 경우: redux 구독 해제, 이벤트 핸들러 해제",
            "    }",
            "    handler = (event)=>{",
            "        // 이벤트 핸들러는 화살표 함수로 만들면 this bind()를 생략해도 된다",
            "        console.log(event.target)",
            "    }",
            "    render() { // JSX로 화면 만들기",
            "        return (",
            "            <div>",
            "                ${2:}",
            "            </div>",
            "        )",
            "    }",
            "};",
            "//export default ${1:${TM_FILENAME_BASE}};"
        ],
        "description": "React Class Component"
    },
    "React Functional Component": {
        "prefix": "rfc",
        "body": [
            "//import React, { useState, useEffect, useRef, useReducer, useContext, useMemo, useCallback, useImperativeHandle, useLayoutEffect, useDebugValue } from \"react\";",
            "",
            "console.log(React);",
            "console.log(React.useState); // 상태값",
            "console.log(React.useEffect); // 생명주기",
            "console.log(React.useRef); // 속성값",
            "",
            "function ${1:${TM_FILENAME_BASE}}(props) {",
            "    //const [user, setUser] = React.useState({ userId: 0, name: \"\", age: 0, })",
            "    return (",
            "        <div>",
            "            ${2:}",
            "        </div>",
            "    )",
            "};",
            "//export default ${1:${TM_FILENAME_BASE}};"
        ],
        "description": "React Functional Component"
    },
    "React script import": {
        "prefix": "reactplugin",
        "body": [
            "",
            "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/babel-standalone/6.26.0/babel.js\">",
            "    /* 자바스크립트로 컴파일러. ES6-->ES5, JSX-->ES5 */",
            "</script>",
            "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/react/16.12.0/umd/react.development.js\">",
            "    /* import { React} from \"react\" */",
            "</script>",
            "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.11.0/umd/react-dom.development.js\">",
            "    /* import { ReactDOM } from \"react-dom\" */",
            "</script>",
            "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/redux/4.0.5/redux.js\">",
            "    /* 리덕스 라이브러리 */",
            "    /* import { React} from \"react\" */",
            "</script>",
            "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/react-redux/7.2.2/react-redux.js\">",
            "    /*  react에서 리덕스를 사용할 수 있게 하는 라이브러리 */",
            "    /*  import { ReactRedux} from \"react-redux\" */",
            "</script>",
            "<script src=\"https://unpkg.com/immer\">",
            "    /* 불변객체 state를 조작하는 라이브러리 */",
            "    /* import immer from \"immer\" */",
            "</script>",
            "<script type=\"text/babel\">",
            "",
            "</script>"
        ],
        "description": "React script"
    }


}